!function(window){"use strict";function isValidJson(json){try{var o=window.JSON.parse(window.JSON.stringify(window.JSON.parse(json)));if(o&&"object"==typeof o&&null!==o)return!0}catch(e){return!1}return!1}function debug(message){enplug.debug&&(arguments[0]=tag+arguments[0],console.log.apply(console,arguments))}function validateCallbacks(options){if(options.successCallback&&"function"!=typeof options.successCallback)throw new Error("");if(options.successCallback=options.successCallback||noop,options.errorCallback&&"function"!=typeof options.errorCallback)throw new Error("");options.errorCallback=options.errorCallback||noop}function sendToParent(methodCall){debug("Calling method:",methodCall);try{var json=JSON.stringify(methodCall);window.parent.postMessage(json,targetOrigin)}catch(e){window.console.error("Enplug SDK error:",e)}}function receiveFromParent(event){if(isValidJson(event.data)){var response=window.JSON.parse(event.data);if(response.namespace===namespace&&"boolean"==typeof response.success){var methodCall=enplug.transport.pendingCalls[response.callId];if(methodCall){methodCall.persistent||delete enplug.transport.pendingCalls[response.callId],debug("Calling method "+(response.success?"success":"error")+" callback:",{call:methodCall,response:response});var cb=response.success?methodCall.successCallback:methodCall.errorCallback;return cb(response.data),!0}}else response.namespace!==namespace&&debug("Did not recognize window message response format:",event)}else debug("Did not recognize non-JSON window message:",event)}var enplug=window.enplug||(window.enplug={debug:!1}),namespace="Enplug",targetOrigin="*",tag="[Enplug SDK] ",noop=function(){};enplug.transport={callId:0,debug:!1,pendingCalls:{},send:function(options){if(options.name)return options.callId=this.callId++,options["transient"]=!!options["transient"],options.persistent=!!options.persistent,options["transient"]||(this.pendingCalls[options.callId]=options),sendToParent(options),options.callId;throw new Error("")},factory:function(context,prefix){return context.method=function(options){return validateCallbacks(options),options.name=prefix+"."+options.name,options.namespace=namespace,enplug.transport.send(options)},context}},window.addEventListener("message",receiveFromParent,!1)}(window),function(enplug){"use strict";function validate(data,expectedType,errorMessage){if(!data||typeof data!==expectedType||"array"===expectedType&&!Array.isArray(data))throw new Error(errorMessage)}var methodPrefix="account";enplug.account=enplug.transport.factory({getAccount:function(onSuccess,onError){return this.method({name:"getAccount",successCallback:onSuccess,errorCallback:onError})},getDisplayGroup:function(onSuccess,onError){return this.method({name:"getDisplay",successCallback:onSuccess,errorCallback:onError})},getInstances:function(accountId,onSuccess,onError){return validate(accountId,"string",""),this.method({name:"getInstances",params:accountId,successCallback:onSuccess,errorCallback:onError})},getAssets:function(onSuccess,onError){return this.method({name:"getAssets",successCallback:onSuccess,errorCallback:onError})},getDefaultAssets:function(onSuccess,onError){return this.method({name:"getDefaultAssets",successCallback:onSuccess,errorCallback:onError})},createAsset:function(name,value,onSuccess,onError){return validate(name,"string",""),validate(value,"object",""),this.method({name:"createAsset",params:[name,value],successCallback:onSuccess,errorCallback:onError})},createAssetFromDefault:function(defaultAssetId,onSuccess,onError){return validate(defaultAssetId,"string",""),this.method({name:"createAssetFromDefault",params:defaultAssetId,successCallback:onSuccess,errorCallback:onError})},updateAsset:function(id,value,onSuccess,onError){return validate(id,"string",""),validate(value,"object",""),this.method({name:"updateAsset",params:[id,value],successCallback:onSuccess,errorCallback:onError})},bulkCreateAssets:function(assets,onSuccess,onError){return validate(assets,"array",""),this.method({name:"bulkCreateAssets",params:assets,successCallback:onSuccess,errorCallback:onError})},bulkUpdateAssets:function(assets,onSuccess,onError){return validate(assets,"array",""),this.method({name:"bulkUpdateAssets",params:assets,successCallback:onSuccess,errorCallback:onError})},bulkRemoveAssets:function(assetIds,onSuccess,onError){return validate(assetIds,"array",""),this.method({name:"bulkRemoveAssets",params:assetIds,successCallback:onSuccess,errorCallback:onError})},removeAsset:function(id,onSuccess,onError){return validate(id,"string",""),this.method({name:"removeAsset",params:[id],successCallback:onSuccess,errorCallback:onError})},getThemes:function(onSuccess,onError){return this.method({name:"getThemes",successCallback:onSuccess,errorCallback:onError})},createTheme:function(newTheme,onSuccess,onError){return validate(newTheme,"object",""),this.method({name:"createTheme",params:newTheme,successCallback:onSuccess,errorCallback:onError})},removeTheme:function(themeId,onSuccess,onError){return validate(themeId,"string",""),this.method({name:"removeTheme",params:themeId,successCallback:onSuccess,errorCallback:onError})},activateTheme:function(themeId,onSuccess,onError){return validate(themeId,"string",""),this.method({name:"activateTheme",params:themeId,successCallback:onSuccess,errorCallback:onError})}},methodPrefix),enplug.account.getDisplay=enplug.account.getDisplayGroup}(window.enplug),function(angular,enplug){"use strict";function alias(original){var service={};for(var property in original)original.hasOwnProperty(property)&&(service[property]=original[property]);return service}if(angular){var module=angular.module("enplug.sdk",[]);module.config(function(){var q=angular.injector(["ng"]).get("$q"),send=enplug.transport.send;enplug.transport.send=function(options){var defer=q.defer(),onSuccess=options.successCallback,onError=options.errorCallback;return options.successCallback=function(result){defer.resolve(result),onSuccess(result)},options.errorCallback=function(result){defer.reject(result),onError(result)},send.call(enplug.transport,options),defer.promise}}),module.factory("$enplugDashboard",function(){return alias(enplug.dashboard)}),module.factory("$enplugAccount",function(){return alias(enplug.account)})}}(window.angular,window.enplug),function(enplug,document){"use strict";function validate(data,expectedType,errorMessage){if(!data||typeof data!==expectedType)throw new Error(errorMessage)}var methodPrefix="dashboard",currentButtons=[],isLoading=!0;enplug.dashboard=enplug.transport.factory({click:function(){return this.method({name:"click","transient":!0})},setHeaderTitle:function(title,onSuccess,onError){return validate(title,"string",""),this.method({name:"set.title",params:title,successCallback:onSuccess,errorCallback:onError})},setHeaderButtons:function(buttons,onSuccess,onError){return validate(buttons,"object",""),currentButtons=[],buttons=Array.isArray(buttons)?buttons:[buttons],buttons.forEach(function(button){button.id="button-"+Math.round(9999*Math.random()+1),currentButtons[button.id]=button}),this.method({name:"set.buttons",params:buttons,persistent:!0,successCallback:function(clicked){if(clicked){var button=currentButtons[clicked.id];button.action()}"function"==typeof onSuccess&&onSuccess(clicked)},errorCallback:onError})},pageLoading:function(bool,onSuccess,onError){return validate(bool,"boolean",""),this.method({name:"page.loading",params:bool,successCallback:function(data){isLoading=bool,"function"==typeof onSuccess&&onSuccess(data)},errorCallback:onError})},isLoading:function(){return isLoading},pageError:function(onSuccess,onError){return this.method({name:"page.error",successCallback:onSuccess,errorCallback:onError})},pageNotFound:function(onSuccess,onError){return this.method({name:"page.notFound",successCallback:onSuccess,errorCallback:onError})},loadingIndicator:function(message,onSuccess,onError){return validate(message,"object",""),this.method({name:"indicator.loading",params:message,successCallback:onSuccess,errorCallback:onError})},successIndicator:function(message,onSuccess,onError){return validate(message,"string",""),this.method({name:"indicator.success",params:message,successCallback:onSuccess,errorCallback:onError})},errorIndicator:function(message,onSuccess,onError){return validate(message,"string",""),this.method({name:"indicator.error",params:message,successCallback:onSuccess,errorCallback:onError})},openConfirm:function(options,onSuccess,onError){return validate(options,"object",""),this.method({name:"confirm",params:options,successCallback:onSuccess,errorCallback:onError})},confirmUnsavedChanges:function(onSuccess,onError){return this.method({name:"unsavedChanges",successCallback:onSuccess,errorCallback:onError})},upload:function(options,onSuccess,onError){return this.method({name:"upload",params:options,successCallback:onSuccess,errorCallback:onError})}},methodPrefix),document.addEventListener("click",function(){return enplug.dashboard.click(),!0},!1)}(window.enplug,document);