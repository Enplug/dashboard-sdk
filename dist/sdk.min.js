!function(window){"use strict";function Transport(window,namespace){function debug(message){enplug.debug&&(arguments[0]=TAG+arguments[0],console.log.apply(console,arguments))}function validateCallbacks(options){if(options.successCallback&&"function"!=typeof options.successCallback)throw new Error(TAG+"Success callback must be a function.");if(options.successCallback=options.successCallback||enplug.noop,options.errorCallback&&"function"!=typeof options.errorCallback)throw new Error(TAG+"Error callback must be a function.");options.errorCallback=options.errorCallback||enplug.noop}function parseResponse(event){try{var response=JSON.parse(event.data);return response.namespace===namespace&&"boolean"==typeof response.success?response:!1}catch(e){}return!1}this.callId=0,this.pendingCalls={},this.namespace=namespace,this.send=function(options){if(options.name){options.callId=++this.callId,options.namespace=namespace,options["transient"]=!!options["transient"],options.persistent=!!options.persistent,validateCallbacks(options),debug("Calling method:",options),options["transient"]||(this.pendingCalls[options.callId]=options);try{var json=JSON.stringify(options);window.parent.postMessage(json,targetOrigin)}catch(e){console.error(TAG+"Error:",e)}return options.callId}throw new Error(TAG+"All transport method calls must have a name.")},this.handleEvent=function(event){if("message"===event.type){var response=parseResponse(event);if(response){var methodCall=this.pendingCalls[response.callId];if(methodCall){methodCall.persistent||delete this.pendingCalls[response.callId],debug("Calling method "+(response.success?"success":"error")+" callback:",{call:methodCall,response:response});var cb=response.success?methodCall.successCallback:methodCall.errorCallback;return cb(response.data),!0}}}return!1},this.cleanup=function(){window.removeEventListener("message",this,!1)},window.addEventListener("message",this,!1)}var enplug=window.enplug||(window.enplug={debug:!1,classes:{},noop:function(){}}),targetOrigin="*",TAG="[Enplug SDK] ";Transport.prototype.TAG=TAG,enplug.classes.Transport=Transport}(window),function(window,enplug){"use strict";function Sender(prefix){if(!prefix)throw new Error(enplug.classes.Transport.prototype.TAG+"Senders must specify a method prefix.");this.prefix=prefix,this.novalidate=!1,this.transport=new enplug.classes.Transport(window,prefix)}Sender.prototype={validate:function(data,expectedType,errorMessage){if(!this.novalidate&&(null===data||typeof data!==expectedType||"array"===expectedType&&!Array.isArray(data)))throw new Error(this.transport.TAG+errorMessage)},method:function(options){if("object"==typeof options)return options.name=this.prefix+"."+options.name,this.transport.send(options);throw new Error("Transport options must be an object.")},cleanup:function(){this.transport.cleanup()}},enplug.classes.Sender=Sender}(window,window.enplug),function(enplug){"use strict";function AccountSender(){enplug.classes.Sender.call(this,"app"),this.getAccount=function(onSuccess,onError){return this.method({name:"getAccount",successCallback:onSuccess,errorCallback:onError})},this.getDisplayGroup=function(onSuccess,onError){return this.method({name:"getDisplay",successCallback:onSuccess,errorCallback:onError})},this.getInstances=function(accountId,onSuccess,onError){return this.validate(accountId,"string","Missing account ID (string)."),this.method({name:"getInstances",params:accountId,successCallback:onSuccess,errorCallback:onError})},this.getAssets=function(onSuccess,onError){return this.method({name:"getAssets",successCallback:onSuccess,errorCallback:onError})},this.getDefaultAssets=function(onSuccess,onError){return this.method({name:"getDefaultAssets",successCallback:onSuccess,errorCallback:onError})},this.createAsset=function(name,value,onSuccess,onError){return this.validate(name,"string","You must provide a name (string) when creating an asset."),this.validate(value,"object","You must provide a value (object) when creating an asset."),this.method({name:"createAsset",params:[name,value],successCallback:onSuccess,errorCallback:onError})},this.createAssetFromDefault=function(defaultAssetId,onSuccess,onError){return this.validate(defaultAssetId,"string","Missing default asset ID (string)."),this.method({name:"createAssetFromDefault",params:defaultAssetId,successCallback:onSuccess,errorCallback:onError})},this.updateAsset=function(id,value,onSuccess,onError){return this.validate(id,"string","You must provide the ID (string) of an asset to update."),this.validate(value,"object","You must provide the new value (object) of an asset to update."),this.method({name:"updateAsset",params:[id,value],successCallback:onSuccess,errorCallback:onError})},this.bulkCreateAssets=function(assets,onSuccess,onError){return this.validate(assets,"array","You must provide an array of assets to bulk create."),this.method({name:"bulkCreateAssets",params:assets,successCallback:onSuccess,errorCallback:onError})},this.bulkUpdateAssets=function(assets,onSuccess,onError){return this.validate(assets,"array","You must provide an array of assets to bulk update."),this.method({name:"bulkUpdateAssets",params:assets,successCallback:onSuccess,errorCallback:onError})},this.bulkRemoveAssets=function(assetIds,onSuccess,onError){return this.validate(assetIds,"array","You must provide an array of asset IDs to bulk remove."),this.method({name:"bulkRemoveAssets",params:assetIds,successCallback:onSuccess,errorCallback:onError})},this.removeAsset=function(id,onSuccess,onError){return this.validate(id,"string","You must provide the ID (string) of the asset to remove."),this.method({name:"removeAsset",params:[id],successCallback:onSuccess,errorCallback:onError})},this.getThemes=function(onSuccess,onError){return this.method({name:"getThemes",successCallback:onSuccess,errorCallback:onError})},this.createTheme=function(newTheme,onSuccess,onError){return this.validate(newTheme,"object","You must provide the new theme (object) to create."),this.method({name:"createTheme",params:newTheme,successCallback:onSuccess,errorCallback:onError})},this.removeTheme=function(themeId,onSuccess,onError){return this.validate(themeId,"string","You must provide the ID (string) of the theme to remove."),this.method({name:"removeTheme",params:themeId,successCallback:onSuccess,errorCallback:onError})},this.activateTheme=function(themeId,onSuccess,onError){return this.validate(themeId,"string","You must provide the ID (string) of the theme to activate."),this.method({name:"activateTheme",params:themeId,successCallback:onSuccess,errorCallback:onError})},this.getDisplay=this.getDisplayGroup}AccountSender.prototype=Object.create(enplug.classes.Sender.prototype),enplug.classes.AccountSender=AccountSender,enplug.account=new AccountSender}(window.enplug),function(angular,enplug){"use strict";function decorateSend(q,scope,transport){var original=transport.send;transport.send=function(options){var defer=q.defer(),onSuccess=options.successCallback||angular.noop,onError=options.errorCallback||angular.noop;return options.successCallback=function(result){scope.$apply(function(){defer.resolve(result),onSuccess(result)})},options.errorCallback=function(result){scope.$apply(function(){defer.reject(result),onError(result)})},original.call(transport,options),defer.promise}}function createSender(type){var className=type.charAt(0).toUpperCase()+type.slice(1)+"Sender",sender=new enplug.classes[className];return enplug[type].cleanup(),enplug[type]=sender,sender}if(angular){var module=angular.module("enplug.sdk",[]);module.factory("$enplugDashboard",function($q,$rootScope){var sender=createSender("dashboard");return decorateSend($q,$rootScope,sender.transport),sender}),module.factory("$enplugAccount",function($q,$rootScope){var sender=createSender("account");return decorateSend($q,$rootScope,sender.transport),sender})}}(window.angular,window.enplug),function(enplug,document){"use strict";function DashboardSender(){function listenToClicks(){return self.click(),!0}enplug.classes.Sender.call(this,"dashboard");var currentButtons=[],isLoading=!0;this.setHeaderTitle=function(title,onSuccess,onError){return this.validate(title,"string","Header title must be a string."),this.method({name:"set.title",params:title,successCallback:onSuccess,errorCallback:onError})},this.setHeaderButtons=function(buttons,onSuccess,onError){this.validate(buttons,"object","Header buttons must be an object (single) or array (multiple)."),currentButtons=[],buttons=Array.isArray(buttons)?buttons:[buttons];for(var i=0;i<buttons.length;i++){var button=buttons[i];this.validate(button,"object","Header buttons must be objects."),button&&(this.validate(button.action,"function","Header buttons must have an action (function)."),button.id="button-"+Math.round(9999*Math.random()+1),currentButtons[button.id]=button)}return this.method({name:"set.buttons",params:buttons,persistent:!0,successCallback:function(clicked){if(clicked){var button=currentButtons[clicked.id];button?button.action():console.warn("Unrecognized button click:",clicked)}"function"==typeof onSuccess&&onSuccess(clicked)},errorCallback:onError})},this.pageLoading=function(bool,onSuccess,onError){return this.validate(bool,"boolean","Page loading status must be a boolean."),this.method({name:"page.loading",params:bool,successCallback:function(){isLoading=bool,"function"==typeof onSuccess&&onSuccess(isLoading)},errorCallback:onError})},this.isLoading=function(){return isLoading},this.pageError=function(onSuccess,onError){return this.method({name:"page.error",successCallback:onSuccess,errorCallback:onError})},this.pageNotFound=function(onSuccess,onError){return this.method({name:"page.notFound",successCallback:onSuccess,errorCallback:onError})},this.loadingIndicator=function(message,onSuccess,onError){return this.validate(message,"string","Loading indicator requires a loading message (string)"),this.method({name:"indicator.loading",params:message,successCallback:onSuccess,errorCallback:onError})},this.successIndicator=function(message,onSuccess,onError){return this.validate(message,"string","Success indicator requires a success message (string)"),this.method({name:"indicator.success",params:message,successCallback:onSuccess,errorCallback:onError})},this.errorIndicator=function(message,onSuccess,onError){return this.validate(message,"string","Error indicator requires an error message (string)"),this.method({name:"indicator.error",params:message,successCallback:onSuccess,errorCallback:onError})},this.openConfirm=function(options,onSuccess,onError){return this.validate(options,"object","Confirm box requires options to be set (object)."),options&&(this.validate(options.title,"string","Confirm box requires options.title to be set (string)."),this.validate(options.text,"string","Confirm box requires options.text to be set (string).")),this.method({name:"confirm",params:options,successCallback:onSuccess,errorCallback:onError})},this.confirmUnsavedChanges=function(onSuccess,onError){return this.method({name:"unsavedChanges",successCallback:onSuccess,errorCallback:onError})},this.upload=function(options,onSuccess,onError){return this.method({name:"upload",params:options,successCallback:onSuccess,errorCallback:onError})},this.cleanup=function(){document.removeEventListener("click",listenToClicks,!1),enplug.classes.Sender.prototype.cleanup.call(this)},this.click=function(){return this.method({name:"click","transient":!0})};var self=this;document.addEventListener("click",listenToClicks,!1)}DashboardSender.prototype=Object.create(enplug.classes.Sender.prototype),enplug.classes.DashboardSender=DashboardSender,enplug.dashboard=new DashboardSender}(window.enplug,document);